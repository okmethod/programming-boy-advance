import{s as n,p as r,e as a,a as t,t as e,c as s,b as $,m,f as l,d as o,g as f,h as g,i as c,j as u,q as i}from"../chunks/scheduler.BrQl0MTG.js";import{S as p,i as h,f as d,b as w,d as v,m as b,t as E,a as B,e as R}from"../chunks/index.BNSTJDHr.js";import{C as x}from"../chunks/CodeSpan.BjLYVJnM.js";import{C}from"../chunks/CodeExecuter.Bro6qtFl.js";function P(n){let p,h,P,H,L,k,j,D,I,S,V,q,G,N,T,y,z,A,F,J,K,M,O,Q,U,W,X,Y,Z,_,nn,rn,an,tn,en,sn,$n,mn,ln,on,fn,gn,cn,un,pn,hn,dn,wn,vn,bn,En,Bn,Rn,xn,Cn,Pn,Hn,Ln,kn,jn,Dn,In,Sn,Vn,qn,Gn,Nn,Tn,yn,zn,An,Fn,Jn="データの型";function Kn(r){n[4](r)}V=new x({props:{data:["Number","white"]}}),G=new x({props:{data:["String","white"]}}),J=new x({props:{data:['""',"lightblue"]}}),X=new x({props:{data:["num","white"]}}),Z=new x({props:{data:["str","white"]}});let Mn={allowedGlobals:n[2]};return void 0!==n[1]&&(Mn.codeExeProps=n[1]),en=new C({props:Mn}),n[3](en),r.push((()=>d(en,"codeExeProps",Kn))),cn=new x({props:{data:["+","white"]}}),dn=new x({props:{data:["num + num","white"]}}),vn=new x({props:{data:["str + str","white"]}}),Rn=new x({props:{data:["str + num","white"]}}),jn=new x({props:{data:["-","white"]}}),In=new x({props:{data:["str - num","white"]}}),Tn=new x({props:{data:["+","white"]}}),{c(){p=a("div"),h=a("h2"),h.textContent=Jn,P=t(),H=a("div"),L=a("hr"),k=t(),j=a("p"),D=e("変数には様々なデータを代入することができます。データの種類を「型」とよびます。\n      "),I=a("br"),S=e("\n      型には様々な種類があり、たとえば「数値型("),w(V.$$.fragment),q=e(")」や「文字列型("),w(G.$$.fragment),N=e(")」があります。"),T=t(),y=a("hr"),z=t(),A=a("p"),F=e("数字は、囲み文字"),w(J.$$.fragment),K=e("で囲むと文字列型になり、囲まないと数値型として扱われます。\n      "),M=a("br"),O=e("\n      数字以外の文字を含む場合は、囲むと文字列型になり、囲まないと変数として扱われます。"),Q=t(),U=a("p"),W=e("このプログラムを実行して、"),w(X.$$.fragment),Y=e(" と "),w(Z.$$.fragment),_=e(" がどのように扱われるか見てみましょう。"),nn=t(),rn=a("hr"),an=t(),tn=a("div"),w(en.$$.fragment),$n=t(),mn=a("div"),ln=a("hr"),on=t(),fn=a("p"),gn=e("また、"),w(cn.$$.fragment),un=e(" のような操作を「演算子」とよびますが、データの型によって演算子の効果が変わることがあります。\n      "),pn=a("br"),hn=e("\n      例えば、数値型同士を "),w(dn.$$.fragment),wn=e(" すると足し算をしますが、文字列型同士を "),w(vn.$$.fragment),bn=e(" すると文字列をつなぎます。\n      "),En=a("br"),Bn=e("\n      そして、文字列型と数値型を "),w(Rn.$$.fragment),xn=e(" すると、数値型が文字列型に変換され、文字列としてつなぎます。"),Cn=t(),Pn=a("hr"),Hn=t(),Ln=a("p"),kn=e("では、演算子"),w(jn.$$.fragment),Dn=e(" を使うとどうなるでしょう？\n      "),w(In.$$.fragment),Sn=e(" に書き換えて実行してみましょう。\n      "),Vn=a("br"),qn=e("\n      結果は予想通りでしたか？それとも不思議な結果でしたか？\n      "),Gn=a("br"),Nn=e("\n      （ヒント："),w(Tn.$$.fragment),yn=e("の場合は、プログラムが自動的に数値を文字列に変換してくれましたね。）"),zn=t(),An=a("hr"),this.h()},l(n){p=s(n,"DIV",{class:!0});var r=$(p);h=s(r,"H2",{class:!0,"data-svelte-h":!0}),"svelte-7kuwmt"!==m(h)&&(h.textContent=Jn),P=l(r),H=s(r,"DIV",{class:!0});var a=$(H);L=s(a,"HR",{class:!0}),k=l(a),j=s(a,"P",{});var t=$(j);D=o(t,"変数には様々なデータを代入することができます。データの種類を「型」とよびます。\n      "),I=s(t,"BR",{}),S=o(t,"\n      型には様々な種類があり、たとえば「数値型("),v(V.$$.fragment,t),q=o(t,")」や「文字列型("),v(G.$$.fragment,t),N=o(t,")」があります。"),t.forEach(f),T=l(a),y=s(a,"HR",{class:!0}),z=l(a),A=s(a,"P",{});var e=$(A);F=o(e,"数字は、囲み文字"),v(J.$$.fragment,e),K=o(e,"で囲むと文字列型になり、囲まないと数値型として扱われます。\n      "),M=s(e,"BR",{}),O=o(e,"\n      数字以外の文字を含む場合は、囲むと文字列型になり、囲まないと変数として扱われます。"),e.forEach(f),Q=l(a),U=s(a,"P",{});var g=$(U);W=o(g,"このプログラムを実行して、"),v(X.$$.fragment,g),Y=o(g," と "),v(Z.$$.fragment,g),_=o(g," がどのように扱われるか見てみましょう。"),g.forEach(f),nn=l(a),rn=s(a,"HR",{class:!0}),a.forEach(f),an=l(r),tn=s(r,"DIV",{class:!0});var c=$(tn);v(en.$$.fragment,c),c.forEach(f),$n=l(r),mn=s(r,"DIV",{class:!0});var u=$(mn);ln=s(u,"HR",{class:!0}),on=l(u),fn=s(u,"P",{});var i=$(fn);gn=o(i,"また、"),v(cn.$$.fragment,i),un=o(i," のような操作を「演算子」とよびますが、データの型によって演算子の効果が変わることがあります。\n      "),pn=s(i,"BR",{}),hn=o(i,"\n      例えば、数値型同士を "),v(dn.$$.fragment,i),wn=o(i," すると足し算をしますが、文字列型同士を "),v(vn.$$.fragment,i),bn=o(i," すると文字列をつなぎます。\n      "),En=s(i,"BR",{}),Bn=o(i,"\n      そして、文字列型と数値型を "),v(Rn.$$.fragment,i),xn=o(i," すると、数値型が文字列型に変換され、文字列としてつなぎます。"),i.forEach(f),Cn=l(u),Pn=s(u,"HR",{class:!0}),Hn=l(u),Ln=s(u,"P",{});var d=$(Ln);kn=o(d,"では、演算子"),v(jn.$$.fragment,d),Dn=o(d," を使うとどうなるでしょう？\n      "),v(In.$$.fragment,d),Sn=o(d," に書き換えて実行してみましょう。\n      "),Vn=s(d,"BR",{}),qn=o(d,"\n      結果は予想通りでしたか？それとも不思議な結果でしたか？\n      "),Gn=s(d,"BR",{}),Nn=o(d,"\n      （ヒント："),v(Tn.$$.fragment,d),yn=o(d,"の場合は、プログラムが自動的に数値を文字列に変換してくれましたね。）"),d.forEach(f),zn=l(u),An=s(u,"HR",{class:!0}),u.forEach(f),r.forEach(f),this.h()},h(){g(h,"class","cLessonTitle"),g(L,"class","cBorderLine"),g(y,"class","cBorderLine"),g(rn,"class","cBorderLine"),g(H,"class","w-full"),g(tn,"class","cResponsiveCodeExecuter"),g(ln,"class","cBorderLine"),g(Pn,"class","cBorderLine"),g(An,"class","cBorderLine"),g(mn,"class","w-full"),g(p,"class","cBookContents")},m(n,r){c(n,p,r),u(p,h),u(p,P),u(p,H),u(H,L),u(H,k),u(H,j),u(j,D),u(j,I),u(j,S),b(V,j,null),u(j,q),b(G,j,null),u(j,N),u(H,T),u(H,y),u(H,z),u(H,A),u(A,F),b(J,A,null),u(A,K),u(A,M),u(A,O),u(H,Q),u(H,U),u(U,W),b(X,U,null),u(U,Y),b(Z,U,null),u(U,_),u(H,nn),u(H,rn),u(p,an),u(p,tn),b(en,tn,null),u(p,$n),u(p,mn),u(mn,ln),u(mn,on),u(mn,fn),u(fn,gn),b(cn,fn,null),u(fn,un),u(fn,pn),u(fn,hn),b(dn,fn,null),u(fn,wn),b(vn,fn,null),u(fn,bn),u(fn,En),u(fn,Bn),b(Rn,fn,null),u(fn,xn),u(mn,Cn),u(mn,Pn),u(mn,Hn),u(mn,Ln),u(Ln,kn),b(jn,Ln,null),u(Ln,Dn),b(In,Ln,null),u(Ln,Sn),u(Ln,Vn),u(Ln,qn),u(Ln,Gn),u(Ln,Nn),b(Tn,Ln,null),u(Ln,yn),u(mn,zn),u(mn,An),Fn=!0},p(n,[r]){const a={};!sn&&2&r&&(sn=!0,a.codeExeProps=n[1],i((()=>sn=!1))),en.$set(a)},i(n){Fn||(E(V.$$.fragment,n),E(G.$$.fragment,n),E(J.$$.fragment,n),E(X.$$.fragment,n),E(Z.$$.fragment,n),E(en.$$.fragment,n),E(cn.$$.fragment,n),E(dn.$$.fragment,n),E(vn.$$.fragment,n),E(Rn.$$.fragment,n),E(jn.$$.fragment,n),E(In.$$.fragment,n),E(Tn.$$.fragment,n),Fn=!0)},o(n){B(V.$$.fragment,n),B(G.$$.fragment,n),B(J.$$.fragment,n),B(X.$$.fragment,n),B(Z.$$.fragment,n),B(en.$$.fragment,n),B(cn.$$.fragment,n),B(dn.$$.fragment,n),B(vn.$$.fragment,n),B(Rn.$$.fragment,n),B(jn.$$.fragment,n),B(In.$$.fragment,n),B(Tn.$$.fragment,n),Fn=!1},d(r){r&&f(p),R(V),R(G),R(J),R(X),R(Z),n[3](null),R(en),R(cn),R(dn),R(vn),R(Rn),R(jn),R(In),R(Tn)}}}function H(n,a,t){let e,s={code:'const num = 10;\nlog("number: " + num);\nlog(\'"number": \' + "num");\nlog("number+: " + (num + num));\n\nconst str = "100";\nlog("string: " + str);\nlog(\'"string": \' + "str");\nlog("string+: " + (str + str));\n\nreturn str + num;',resultString:"",logs:[]};return[e,s,{},function(n){r[n?"unshift":"push"]((()=>{e=n,t(0,e)}))},function(n){s=n,t(1,s)}]}class L extends p{constructor(r){super(),h(this,r,H,P,n,{})}}export{L as component};

import{s as n,o as a,e,a as t,t as r,c as s,b as l,m as $,f as o,d as f,g as c,h as g,i,j as m,p as h}from"../chunks/scheduler.DX2ogySE.js";import{S as p,i as d,b as u,c as w,a as v,m as B,t as R,d as b,e as E}from"../chunks/index.C1TJfhvQ.js";import{C as x}from"../chunks/CodeSpan.DXNaiYkO.js";import{C}from"../chunks/CodeExecuter.CaPqni69.js";function H(n){let p,d,H,L,P,j,k,D,I,V,S,y,A,G,T,q,z,F,J,K,M,N,O,Q,U,W,X,Y,Z,_,nn,an,en,tn,rn,sn,ln,$n,on,fn,cn,gn,mn,hn,pn,dn,un,wn,vn,Bn,Rn,bn,En,xn,Cn,Hn,Ln,Pn,jn,kn,Dn,In,Vn,Sn,yn,An,Gn,Tn,qn,zn,Fn,Jn,Kn,Mn,Nn,On,Qn,Un="データの配列",Wn="配列は、数値型のデータだけでなく、様々な型のデータを要素として入れることができます。";function Xn(a){n[4](a)}I=new x({props:{data:["Array","white"]}}),A=new x({props:{data:["[]","white"]}}),T=new x({props:{data:[",","white"]}}),W=new x({props:{data:[["list[","white"],["0","blue"],["]","white"]]}}),_=new x({props:{data:["list.length","white"]}});let Yn={allowedGlobals:n[2]};return void 0!==n[1]&&(Yn.codeExeProps=n[1]),$n=new C({props:Yn}),n[3]($n),a.push((()=>u($n,"codeExeProps",Xn))),bn=new x({props:{data:["linl","white"]}}),Hn=new x({props:{data:["linl[0]","white"]}}),Pn=new x({props:{data:["linl[0][0]","white"]}}),yn=new x({props:{data:["...","white"]}}),qn=new x({props:{data:["linl","white"]}}),Fn=new x({props:{data:[["[...l, ...[","white"],["8, 10","blue"],["]","white"]]}}),{c(){p=e("div"),d=e("h2"),d.textContent=Un,H=t(),L=e("div"),P=e("hr"),j=t(),k=e("p"),D=r("「数値型」「文字列型」とは別のデータ型として、「配列("),w(I.$$.fragment),V=r(")型」というものがあります。\n      "),S=e("br"),y=r("\n      配列は複数のデータを一つの変数にまとめて保存するためのもので、括弧"),w(A.$$.fragment),G=r("\n      とカンマ"),w(T.$$.fragment),q=r(" を使って定義します。\n      "),z=e("br"),F=r("\n      「リスト」とよばれることもあります。"),J=t(),K=e("hr"),M=t(),N=e("p"),O=r("配列に含まれるそれぞれのデータを「要素」とよび、要素は左から 0番, 1番, 2番, ... と番号がついています。\n      "),Q=e("br"),U=r("\n      配列の要素を使うには、"),w(W.$$.fragment),X=r(" のように配列名に括弧をつけて番号を指定します。\n      "),Y=e("br"),Z=r("\n      また、"),w(_.$$.fragment),nn=r(" のように書くことで、配列のなかにいくつ要素があるか確認することもできます。\n      "),an=e("br"),en=r("\n      このプログラムを実行して、配列とその中の要素を表示できるか確認してみましょう。"),tn=t(),rn=e("hr"),sn=t(),ln=e("div"),w($n.$$.fragment),fn=t(),cn=e("div"),gn=e("hr"),mn=t(),hn=e("p"),hn.textContent=Wn,pn=t(),dn=e("hr"),un=t(),wn=e("p"),vn=r("少し複雑ですが、配列のなかに配列を入れることもできます。\n      "),Bn=e("br"),Rn=r("\n      変数"),w(bn.$$.fragment),En=r(" は配列の中に 2つの配列が入っており、要素数は 2 です。\n      "),xn=e("br"),Cn=t(),w(Hn.$$.fragment),Ln=r(" は配列の中の最初の要素で、\n      "),w(Pn.$$.fragment),jn=r(" はその中の最初の要素です。"),kn=t(),Dn=e("hr"),In=t(),Vn=e("p"),Sn=r("また、2つの配列から、それぞれの要素を含む1つの配列を作りたい場合は "),w(yn.$$.fragment),An=r(" を使って配列を展開します。\n      "),Gn=e("br"),Tn=r("\n      変数"),w(qn.$$.fragment),zn=r(" に代入する部分を\n      "),w(Fn.$$.fragment),Jn=r(" のように書き換えて実行してみましょう。\n      "),Kn=e("br"),Mn=r("\n      結果はどう変わりましたか？"),Nn=t(),On=e("hr"),this.h()},l(n){p=s(n,"DIV",{class:!0});var a=l(p);d=s(a,"H2",{class:!0,"data-svelte-h":!0}),"svelte-5pffgc"!==$(d)&&(d.textContent=Un),H=o(a),L=s(a,"DIV",{class:!0});var e=l(L);P=s(e,"HR",{class:!0}),j=o(e),k=s(e,"P",{});var t=l(k);D=f(t,"「数値型」「文字列型」とは別のデータ型として、「配列("),v(I.$$.fragment,t),V=f(t,")型」というものがあります。\n      "),S=s(t,"BR",{}),y=f(t,"\n      配列は複数のデータを一つの変数にまとめて保存するためのもので、括弧"),v(A.$$.fragment,t),G=f(t,"\n      とカンマ"),v(T.$$.fragment,t),q=f(t," を使って定義します。\n      "),z=s(t,"BR",{}),F=f(t,"\n      「リスト」とよばれることもあります。"),t.forEach(c),J=o(e),K=s(e,"HR",{class:!0}),M=o(e),N=s(e,"P",{});var r=l(N);O=f(r,"配列に含まれるそれぞれのデータを「要素」とよび、要素は左から 0番, 1番, 2番, ... と番号がついています。\n      "),Q=s(r,"BR",{}),U=f(r,"\n      配列の要素を使うには、"),v(W.$$.fragment,r),X=f(r," のように配列名に括弧をつけて番号を指定します。\n      "),Y=s(r,"BR",{}),Z=f(r,"\n      また、"),v(_.$$.fragment,r),nn=f(r," のように書くことで、配列のなかにいくつ要素があるか確認することもできます。\n      "),an=s(r,"BR",{}),en=f(r,"\n      このプログラムを実行して、配列とその中の要素を表示できるか確認してみましょう。"),r.forEach(c),tn=o(e),rn=s(e,"HR",{class:!0}),e.forEach(c),sn=o(a),ln=s(a,"DIV",{class:!0});var g=l(ln);v($n.$$.fragment,g),g.forEach(c),fn=o(a),cn=s(a,"DIV",{class:!0});var i=l(cn);gn=s(i,"HR",{class:!0}),mn=o(i),hn=s(i,"P",{"data-svelte-h":!0}),"svelte-1t3p5ff"!==$(hn)&&(hn.textContent=Wn),pn=o(i),dn=s(i,"HR",{class:!0}),un=o(i),wn=s(i,"P",{});var m=l(wn);vn=f(m,"少し複雑ですが、配列のなかに配列を入れることもできます。\n      "),Bn=s(m,"BR",{}),Rn=f(m,"\n      変数"),v(bn.$$.fragment,m),En=f(m," は配列の中に 2つの配列が入っており、要素数は 2 です。\n      "),xn=s(m,"BR",{}),Cn=o(m),v(Hn.$$.fragment,m),Ln=f(m," は配列の中の最初の要素で、\n      "),v(Pn.$$.fragment,m),jn=f(m," はその中の最初の要素です。"),m.forEach(c),kn=o(i),Dn=s(i,"HR",{class:!0}),In=o(i),Vn=s(i,"P",{});var h=l(Vn);Sn=f(h,"また、2つの配列から、それぞれの要素を含む1つの配列を作りたい場合は "),v(yn.$$.fragment,h),An=f(h," を使って配列を展開します。\n      "),Gn=s(h,"BR",{}),Tn=f(h,"\n      変数"),v(qn.$$.fragment,h),zn=f(h," に代入する部分を\n      "),v(Fn.$$.fragment,h),Jn=f(h," のように書き換えて実行してみましょう。\n      "),Kn=s(h,"BR",{}),Mn=f(h,"\n      結果はどう変わりましたか？"),h.forEach(c),Nn=o(i),On=s(i,"HR",{class:!0}),i.forEach(c),a.forEach(c),this.h()},h(){g(d,"class","cLessonTitle"),g(P,"class","cBorderLine"),g(K,"class","cBorderLine"),g(rn,"class","cBorderLine"),g(L,"class","w-full"),g(ln,"class","cResponsiveCodeExecuter"),g(gn,"class","cBorderLine"),g(dn,"class","cBorderLine"),g(Dn,"class","cBorderLine"),g(On,"class","cBorderLine"),g(cn,"class","w-full"),g(p,"class","cBookContents")},m(n,a){i(n,p,a),m(p,d),m(p,H),m(p,L),m(L,P),m(L,j),m(L,k),m(k,D),B(I,k,null),m(k,V),m(k,S),m(k,y),B(A,k,null),m(k,G),B(T,k,null),m(k,q),m(k,z),m(k,F),m(L,J),m(L,K),m(L,M),m(L,N),m(N,O),m(N,Q),m(N,U),B(W,N,null),m(N,X),m(N,Y),m(N,Z),B(_,N,null),m(N,nn),m(N,an),m(N,en),m(L,tn),m(L,rn),m(p,sn),m(p,ln),B($n,ln,null),m(p,fn),m(p,cn),m(cn,gn),m(cn,mn),m(cn,hn),m(cn,pn),m(cn,dn),m(cn,un),m(cn,wn),m(wn,vn),m(wn,Bn),m(wn,Rn),B(bn,wn,null),m(wn,En),m(wn,xn),m(wn,Cn),B(Hn,wn,null),m(wn,Ln),B(Pn,wn,null),m(wn,jn),m(cn,kn),m(cn,Dn),m(cn,In),m(cn,Vn),m(Vn,Sn),B(yn,Vn,null),m(Vn,An),m(Vn,Gn),m(Vn,Tn),B(qn,Vn,null),m(Vn,zn),B(Fn,Vn,null),m(Vn,Jn),m(Vn,Kn),m(Vn,Mn),m(cn,Nn),m(cn,On),Qn=!0},p(n,[a]){const e={};!on&&2&a&&(on=!0,e.codeExeProps=n[1],h((()=>on=!1))),$n.$set(e)},i(n){Qn||(R(I.$$.fragment,n),R(A.$$.fragment,n),R(T.$$.fragment,n),R(W.$$.fragment,n),R(_.$$.fragment,n),R($n.$$.fragment,n),R(bn.$$.fragment,n),R(Hn.$$.fragment,n),R(Pn.$$.fragment,n),R(yn.$$.fragment,n),R(qn.$$.fragment,n),R(Fn.$$.fragment,n),Qn=!0)},o(n){b(I.$$.fragment,n),b(A.$$.fragment,n),b(T.$$.fragment,n),b(W.$$.fragment,n),b(_.$$.fragment,n),b($n.$$.fragment,n),b(bn.$$.fragment,n),b(Hn.$$.fragment,n),b(Pn.$$.fragment,n),b(yn.$$.fragment,n),b(qn.$$.fragment,n),b(Fn.$$.fragment,n),Qn=!1},d(a){a&&c(p),E(I),E(A),E(T),E(W),E(_),n[3](null),E($n),E(bn),E(Hn),E(Pn),E(yn),E(qn),E(Fn)}}}function L(n,e,t){let r,s={code:'const l = [2, 4, 6];\nlog("list: " + l);\nlog("[0]: " + l[0]);\nlog("[1]+[2]: " + (l[1] + l[2]));\nlog("list len: " + l.length);\n\nconst linl = [l, [8, 10]]\nlog("linl[0]: " + linl[0]);\nlog("linl[0][0]: " + linl[0][0]);\nlog("linl[1][0]: " + linl[1][0]);\nlog("linl len: " + linl.length);\nreturn linl;',resultString:"",logs:[]};return[r,s,{},function(n){a[n?"unshift":"push"]((()=>{r=n,t(0,r)}))},function(n){s=n,t(1,s)}]}class P extends p{constructor(a){super(),d(this,a,L,H,n,{})}}export{P as component};
